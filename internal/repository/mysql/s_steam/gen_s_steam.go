///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package s_steam

import (
	"fmt"
	"time"

	"github.com/xinliangnote/go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *SSteam {
	return new(SSteam)
}

func NewQueryBuilder() *sSteamQueryBuilder {
	return new(sSteamQueryBuilder)
}

func (t *SSteam) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type sSteamQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *sSteamQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *sSteamQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&SSteam{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *sSteamQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&SSteam{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *sSteamQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&SSteam{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *sSteamQueryBuilder) First(db *gorm.DB) (*SSteam, error) {
	ret := &SSteam{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *sSteamQueryBuilder) QueryOne(db *gorm.DB) (*SSteam, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *sSteamQueryBuilder) QueryAll(db *gorm.DB) ([]*SSteam, error) {
	var ret []*SSteam
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *sSteamQueryBuilder) Limit(limit int) *sSteamQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *sSteamQueryBuilder) Offset(offset int) *sSteamQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *sSteamQueryBuilder) WhereId(p mysql.Predicate, value int64) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereIdIn(value []int64) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereIdNotIn(value []int64) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderById(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamName(p mysql.Predicate, value string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_name", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamNameIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_name", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamNameNotIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByTeamName(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "team_name "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamNum(p mysql.Predicate, value int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_num", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamNumIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_num", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamNumNotIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByTeamNum(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "team_num "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamZbName(p mysql.Predicate, value string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_zb_name", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamZbNameIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_zb_name", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamZbNameNotIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_zb_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByTeamZbName(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "team_zb_name "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereCreateTime(p mysql.Predicate, value string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereCreateTimeIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereCreateTimeNotIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByCreateTime(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamSize(p mysql.Predicate, value int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_size", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamSizeIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_size", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamSizeNotIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_size", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByTeamSize(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "team_size "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamContem(p mysql.Predicate, value string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_contem", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamContemIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_contem", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereTeamContemNotIn(value []string) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "team_contem", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByTeamContem(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "team_contem "+order)
	return qb
}

func (qb *sSteamQueryBuilder) WhereDeleted(p mysql.Predicate, value int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", p),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereDeletedIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", "IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) WhereDeletedNotIn(value []int32) *sSteamQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sSteamQueryBuilder) OrderByDeleted(asc bool) *sSteamQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted "+order)
	return qb
}
