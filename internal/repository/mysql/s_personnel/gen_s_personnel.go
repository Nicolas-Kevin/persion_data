///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package s_personnel

import (
	"fmt"

	"go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *SPersonnel {
	return new(SPersonnel)
}

func NewQueryBuilder() *sPersonnelQueryBuilder {
	return new(sPersonnelQueryBuilder)
}

func (t *SPersonnel) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type sPersonnelQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *sPersonnelQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *sPersonnelQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&SPersonnel{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *sPersonnelQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&SPersonnel{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *sPersonnelQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&SPersonnel{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *sPersonnelQueryBuilder) First(db *gorm.DB) (*SPersonnel, error) {
	ret := &SPersonnel{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *sPersonnelQueryBuilder) QueryOne(db *gorm.DB) (*SPersonnel, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *sPersonnelQueryBuilder) QueryAll(db *gorm.DB) ([]*SPersonnel, error) {
	var ret []*SPersonnel
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *sPersonnelQueryBuilder) Limit(limit int) *sPersonnelQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *sPersonnelQueryBuilder) Offset(offset int) *sPersonnelQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereId(p mysql.Predicate, value int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereIdIn(value []int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereIdNotIn(value []int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderById(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserName(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_name", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserNameIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_name", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserNameNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserName(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_name "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserAge(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_age", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserAgeIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_age", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserAgeNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_age", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserAge(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_age "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserSex(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_sex", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserSexIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_sex", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserSexNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_sex", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserSex(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_sex "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserDate(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_date", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserDateIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_date", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserDateNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_date", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserDate(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_date "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePoliticalOutLook(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "political_out_look", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePoliticalOutLookIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "political_out_look", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePoliticalOutLookNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "political_out_look", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByPoliticalOutLook(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "political_out_look "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereCompany(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereCompanyIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereCompanyNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByCompany(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "company "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePosition(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "position", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePositionIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "position", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePositionNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "position", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByPosition(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "position "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereMajor(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "major", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereMajorIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "major", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereMajorNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "major", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByMajor(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "major "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserLevel(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_level", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserLevelIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_level", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserLevelNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_level", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserLevel(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_level "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserHeight(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_height", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserHeightIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_height", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserHeightNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_height", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserHeight(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_height "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserWeight(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_weight", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserWeightIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_weight", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserWeightNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_weight", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserWeight(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_weight "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereShoeSize(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "shoe_size", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereShoeSizeIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "shoe_size", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereShoeSizeNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "shoe_size", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByShoeSize(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "shoe_size "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereHeadNum(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_num", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereHeadNumIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_num", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereHeadNumNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByHeadNum(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "head_num "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBloodType(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "blood_type", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBloodTypeIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "blood_type", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBloodTypeNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "blood_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByBloodType(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "blood_type "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereIdNum(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id_num", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereIdNumIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id_num", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereIdNumNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByIdNum(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id_num "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBankNum(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bank_num", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBankNumIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bank_num", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereBankNumNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bank_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByBankNum(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "bank_num "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePhoneNum(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone_num", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePhoneNumIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone_num", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WherePhoneNumNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByPhoneNum(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phone_num "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserTeam(p mysql.Predicate, value int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_team", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserTeamIn(value []int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_team", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereUserTeamNotIn(value []int64) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_team", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByUserTeam(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_team "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereTrainStatus(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "train_status", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereTrainStatusIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "train_status", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereTrainStatusNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "train_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByTrainStatus(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "train_status "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereRewardStatus(p mysql.Predicate, value string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reward_status", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereRewardStatusIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reward_status", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereRewardStatusNotIn(value []string) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reward_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByRewardStatus(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "reward_status "+order)
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereDeleted(p mysql.Predicate, value int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", p),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereDeletedIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", "IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) WhereDeletedNotIn(value []int32) *sPersonnelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sPersonnelQueryBuilder) OrderByDeleted(asc bool) *sPersonnelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted "+order)
	return qb
}
